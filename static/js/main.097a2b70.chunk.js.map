{"version":3,"sources":["Component/Gist/index.js","App.js","serviceWorkerRegistration.js","index.js","Component/Gist/index.module.css"],"names":["cx","classNames","bind","styles","GistMap","lati","longi","myMap","navigator","geolocation","getCurrentPosition","data","console","log","coords","latitude","longitude","L","map","center","zoom","tileLayer","addTo","e","alert","code","message","enableHighAccuracy","timeout","maximumAge","useEffect","marker","icon","color","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","bindPopup","openPopup","id","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"kQAOMA,EAAKC,IAAWC,KAAKC,KA0DZC,EAzDC,WACZ,IAAIC,EAAKC,EAkBLC,EAiCJ,OAhCAC,UAAUC,YAAYC,oBAClB,SAAAC,GACIC,QAAQC,IAAI,OAAOF,GACnBN,EAAOM,EAAKG,OAAOC,SACnBT,EAAQK,EAAKG,OAAOE,UAEpBT,EAAQU,IAAEC,IAAIlB,EAAG,SAAS,CACtBmB,OAAO,CAACd,EAAKC,GACbc,KAAK,KAITH,IAAEI,UADa,sDACKC,MAAMf,MA7BZ,SAAAgB,GAElBC,MAAM,4BAAD,OAASD,EAAEE,KAAX,4CAA0BF,EAAEG,YA8BjC,CACIC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,IAIpBC,qBAAU,WACN,IAEgBb,IAAEc,OAAO,CAAC1B,EAAKC,GAAO,CAAC0B,MAtC1BC,EAsCuC,OArC7C,IAAIhB,IAAEiB,KAAK,CACdC,QAAQ,kFAAD,OAAoFF,EAApF,QACPG,UAAW,gFACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,SA+ByClB,MAAMf,GAC5DkC,UAAJ,wCAAwBC,YAC3B,MAAMnB,GACHX,QAAQC,IAAIU,GAzCJ,IAACU,IA2Cf,IAGE,qBAAKU,GAAI3C,EAAG,YCnDL4C,G,MAPH,WACR,OACI,qBAAKC,UAAY,MAAjB,SACI,cAAC,EAAD,QCMNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9B9C,UAAU+C,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfvD,UAAU+C,cAAcS,YAI1BpD,QAAQC,IACN,+GAKEyC,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB9C,QAAQC,IAAI,sCAGRyC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACC,GACNxD,QAAQwD,MAAM,4CAA6CA,MCxFjEC,IAASC,OACP,cAAC,EAAD,IACDC,SAASC,eAAe,SDYlB,SAAkBlB,GACvB,GAA6C,kBAAmB9C,UAAW,CAGzE,GADkB,IAAIiE,IAAIC,YAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,YAAN,sBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAACuB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5E,UAAU+C,cAAc8B,MAAM5B,MAAK,SAACC,GAClCA,EAAa4B,aAAa7B,MAAK,WAC7BT,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLvD,QAAQC,IAAI,oEAtFV2E,CAAwBnC,EAAOC,GAI/B9C,UAAU+C,cAAc8B,MAAM5B,MAAK,WACjC7C,QAAQC,IACN,+GAMJuC,EAAgBC,EAAOC,OCpC/BmC,I,kBCXAC,EAAOC,QAAU,CAAC,MAAQ,uB","file":"static/js/main.097a2b70.chunk.js","sourcesContent":["import React,{useEffect} from 'react';\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport L from \"leaflet\";\r\nimport './index.module.css';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport styles from './index.module.css';\r\nconst cx = classNames.bind(styles);\r\nconst GistMap = () => {\r\n    let lati,longi;\r\n    //throw error\r\n    const errorCallback = e => {\r\n        // document.getElementById('position').innerHTML = `錯誤碼： ${e.code}<br>錯誤訊息： ${e.message}`;\r\n        alert(`錯誤碼： ${e.code}\\n錯誤訊息： ${e.message}`);\r\n    }\r\n    const getIcon = (color) => {\r\n        return new L.Icon({\r\n            iconUrl: `https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${color}.png`,\r\n            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n            iconSize: [25, 41],\r\n            iconAnchor: [12, 41],\r\n            popupAnchor: [1, -34],\r\n            shadowSize: [41, 41]\r\n        })\r\n    }\r\n\r\n    //取得自身位置\r\n    let myMap;\r\n    navigator.geolocation.getCurrentPosition(\r\n        data=>{\r\n            console.log('data',data);\r\n            lati = data.coords.latitude;\r\n            longi = data.coords.longitude;\r\n            \r\n            myMap = L.map(cx(\"myMap\"),{\r\n                center:[lati,longi], \r\n                zoom:17\r\n            })\r\n            //設定圖資來源：\r\n            const OSMUrl = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\r\n            L.tileLayer(OSMUrl).addTo(myMap);\r\n        },\r\n        errorCallback,\r\n        {\r\n            enableHighAccuracy: false,\r\n            timeout: 2000000000,\r\n            maximumAge: 0,\r\n        }\r\n    );\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            //釘上自己位置的圖釘\r\n            const pos = L.marker([lati,longi],{icon:getIcon('blue')}).addTo(myMap);\r\n            pos.bindPopup(`您所在的位置`).openPopup(); \r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    },[]);\r\n    \r\n    return ( \r\n        <div id={cx('myMap')}></div>\r\n    ); \r\n}\r\n \r\nexport default GistMap;","import GisMap from './Component/Gist';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className = \"app\">\r\n            <GisMap/>\r\n        </div>\r\n    )\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';//react component\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <App />\r\n,document.getElementById('root'));\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nserviceWorkerRegistration.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myMap\":\"Gist_myMap__yHaRs\"};"],"sourceRoot":""}